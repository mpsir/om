{"use_io":"function(socket, next) {\r\n    // 111 debug('socket.handshake session data is %j.', socket.handshake.session);\r\n    next();\r\n}","use_app":"function(req, res, next) {\r\n        // debug('Express `req.session` data is %j.', req.session);\r\n        next();\r\n    }","socket_connection":"function (socket) {\r\n        g.f.socket_connect(socket)\r\n        socket.on('login', function () { g.f.socket_login(socket) });\r\n        socket.on('msg', function (data, c_back) { g.f.socket_msg(socket, data, c_back) });\r\n        socket.on('checksession', function () { g.f.socket_checksession(socket) });\r\n        socket.on('logout', function () { f.socket_logout(socket) });\r\n    }","socket_login":"function (socket) {\r\n        debug('Received login message');\r\n        socket.handshake.session.user = {\r\n            username: 'OSK'\r\n        };\r\n        debug('socket.handshake session data is %j.', socket.handshake.session);\r\n\r\n        // socket.handshake.session.save();\r\n        //emit logged_in for debugging purposes of this example\r\n        socket.emit('logged_in', socket.handshake.session);\r\n    }","socket_checksession":"function (socket) {\r\n        debug('Received checksession message');\r\n        debug('socket.handshake session data is %j.', socket.handshake.session);\r\n        socket.emit('checksession', socket.handshake.session);\r\n    }","socket_logout":"function (socket) {\r\n        debug('Received logout message');\r\n        delete socket.handshake.session.user;\r\n        // socket.handshake.session.save();\r\n        //emit logged_out for debugging purposes of this example\r\n        debug('socket.handshake session data is %j.', socket.handshake.session);\r\n        socket.emit('logged_out', socket.handshake.session);\r\n    }","socket_connect":"function (socket) {\r\n        r.connected_sockets++\r\n        console.log('\\nconnected_sockets', r.connected_sockets);\r\n        // socket.emit('sessiondata', socket.handshake.session);\r\n    }","socket_msg":"function (socket, data, c_back) {\r\n        if (typeof data == 'object') {\r\n            if (data.hasOwnProperty('type') && (typeof data.type == 'string')) {\r\n                switch (data.type) {\r\n                    case 'admin':\r\n                        globalThis.f.socket_admin_msg(socket, data, c_back)\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            } else { console.log(`type not fount or type is not string.`); }\r\n        }\r\n        else { console.log('msg is not object', msg); }\r\n    }","socket_admin_msg":"function (socket, data, c_back) {\r\n\r\n        console.log('admin msg received', data.subt_type);\r\n\r\n        if (data.subt_type == \"Get_App_Index\") {\r\n            if (c_back != undefined) { c_back(App_Index) }\r\n        }\r\n        if (data.subt_type == \"Set_App_Index\") {\r\n            if (data.hasOwnProperty('data')) {\r\n                App_Index = data.data\r\n                fs.writeFileSync(\"App-index.js\", data.data);\r\n                io.emit('msg', {\r\n                    type: 'Set_App_Index',\r\n                    data: data.data\r\n                })\r\n            }\r\n        }\r\n\r\n        if (data.subt_type == \"Get_Funs\") {\r\n            if (c_back != undefined) {\r\n                console.log(\"ok\");\r\n                console.log(f);\r\n                //var a = JSON.parse(JSONF.stringify(f))\r\n                var a = JSONF.stringify(f)\r\n                c_back(  a ) \r\n            }\r\n        }\r\n        if (data.subt_type == \"Set_App_Funs\") {\r\n            if (data.hasOwnProperty('data')) {\r\n                console.clear()\r\n                console.log('msg received', 'Set_App_Funs');\r\n                g.f = JSONF.parse(data.data)\r\n                // g.f = JSONF.parse( JSONF.stringify(data.data) )\r\n                // console.log(g.f);\r\n                fs.writeFileSync(\"App-funs.json\", JSONF.stringify(g.f, null, 2));\r\n                io.emit('msg', {\r\n                    type: 'Set_App_Funs',\r\n                    data: JSON.parse(JSONF.stringify(f))\r\n                })\r\n            }\r\n        }\r\n\r\n    }","app_login":"function (req, res, next) {\r\n        debug('Requested /login');\r\n        req.session.user = {\r\n            username: 'OSK'\r\n        };\r\n        //req.session.save();\r\n        res.redirect('/');\r\n    }","app_logout":"function (req, res, next) {\r\n        debug('Requested /logout');\r\n        delete req.session.user;\r\n        //req.session.save();\r\n        res.redirect('/');\r\n    }"}